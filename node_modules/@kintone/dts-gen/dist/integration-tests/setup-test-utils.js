"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetupTestApp = void 0;
const fs = __importStar(require("fs"));
const demo_datas_1 = require("../kintone/clients/demo-datas");
const logger_1 = require("../utils/logger");
const rethrow = (err) => Promise.reject(err);
const createKintoneApp = (client, name) => __awaiter(void 0, void 0, void 0, function* () {
    return client
        .requestCreateNewApp({ name })
        .then((resp) => {
        (0, logger_1.log)(`Preparing for App(ID:${resp.app})`);
        return resp.app;
    })
        .catch(rethrow);
});
const addDemoField = (client, app) => __awaiter(void 0, void 0, void 0, function* () {
    (0, logger_1.log)(`Preparing for field settings(ID:${app})`);
    const properties = demo_datas_1.DemoDatas.DemoDataFields;
    return client
        .requestAddFormField({
        app,
        properties,
    })
        .catch(rethrow);
});
const uploadFile = (client, data, metadata) => __awaiter(void 0, void 0, void 0, function* () {
    (0, logger_1.log)(`Uploading ${metadata.name}`);
    return client
        .requestUploadFile({
        data,
        fileName: metadata.name,
        contentType: metadata.contentType,
    })
        .then((resp) => {
        (0, logger_1.log)(`Finish Uploading ${metadata.name}(${resp.fileKey})`);
        return resp.fileKey;
    })
        .catch(rethrow);
});
const sleep = (msec) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve) => setTimeout(resolve, msec));
});
const updateJsCustomize = (client, app, fileKey) => __awaiter(void 0, void 0, void 0, function* () {
    const scope = "ALL";
    const desktop = {
        js: [
            {
                type: "FILE",
                file: {
                    fileKey,
                },
            },
        ],
    };
    return client
        .requestJsCustomizeUpdate({
        app,
        scope,
        desktop,
    })
        .catch(rethrow);
});
const deployApp = (client, app) => __awaiter(void 0, void 0, void 0, function* () {
    const apps = [{ app }];
    yield client.requestDepoy({ apps });
    for (const i of [1, 2, 3, 4, 5]) {
        const successApps = yield client
            .requestGetDeployStatus({ apps: [app] })
            .then((resp) => {
            return resp.apps.filter((a) => a.status === "SUCCESS");
        })
            .catch(rethrow);
        if (successApps.length !== 1) {
            (0, logger_1.log)(`Waiting for Deploy complete... ${i} times`);
            yield sleep(3000);
        }
    }
});
const addDemoRecord = (client, app, fileName) => __awaiter(void 0, void 0, void 0, function* () {
    const DemoRecord = demo_datas_1.DemoDatas.DemoRecord;
    const record = Object.assign(DemoRecord);
    const upload1 = yield client.requestUploadFile({
        data: fs.createReadStream(fileName),
        fileName: "sampleText",
        contentType: "plain/text",
    });
    record.Attachment.value.push({
        contentType: "plain/text",
        fileKey: upload1.fileKey,
        name: "text1",
    });
    const upload2 = yield client.requestUploadFile({
        data: fs.createReadStream(fileName),
        fileName: "sampleText",
        contentType: "plain/text",
    });
    record.Table_0.value[0].value.Attachment_Table.value.push({
        contentType: "plain/text",
        fileKey: upload2.fileKey,
        name: "text2",
    });
    return client.requestAddRecord({ app, record });
});
exports.SetupTestApp = {
    createKintoneApp,
    addDemoField,
    uploadFile,
    updateJsCustomize,
    deployApp,
    addDemoRecord,
};
//# sourceMappingURL=setup-test-utils.js.map