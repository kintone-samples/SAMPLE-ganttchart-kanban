#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const forms_client_impl_1 = require("./kintone/clients/forms-client-impl");
const fileldtype_converter_1 = require("./converters/fileldtype-converter");
const template_1 = require("./templates/template");
const objectvalues_1 = require("./utils/objectvalues");
const cli_parser_1 = require("./cli-parser");
process.on("uncaughtException", (e) => {
    console.error(e.message);
    // eslint-disable-next-line n/no-process-exit
    process.exit(1);
});
const args = (0, cli_parser_1.parse)(process.argv);
const client = new forms_client_impl_1.FormsClientImpl(args);
const fetchFormPropertiesInput = {
    appId: args.appId,
    guestSpaceId: args.guestSpaceId,
    preview: args.preview,
};
const handler = () => __awaiter(void 0, void 0, void 0, function* () {
    const properties = yield client.fetchFormProperties(fetchFormPropertiesInput);
    const fieldTypeGroups = fileldtype_converter_1.FieldTypeConverter.convertFieldTypesToFieldTypeGroups((0, objectvalues_1.objectValues)(properties));
    const input = {
        typeName: args.typeName,
        namespace: args.namespace,
        fieldTypeGroups,
    };
    yield template_1.TypeDefinitionTemplate.renderAsFile(args.output, input);
});
handler().catch((err) => {
    console.error(err);
    // eslint-disable-next-line n/no-process-exit
    process.exit(1);
});
//# sourceMappingURL=index.js.map