"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const demo_client_1 = require("../kintone/clients/demo-client");
const demo_fullwidth_symbol_client_1 = require("../kintone/clients/demo-fullwidth-symbol-client");
const fileldtype_converter_1 = require("../converters/fileldtype-converter");
const objectvalues_1 = require("../utils/objectvalues");
const fs = __importStar(require("fs"));
const eslint_1 = require("eslint");
const path_1 = __importDefault(require("path"));
const typescript_1 = __importDefault(require("@cybozu/eslint-config/flat/presets/typescript"));
const prettierPluginTypescript = __importStar(require("prettier/plugins/typescript"));
const prettierPluginEstree = __importStar(require("prettier/plugins/estree"));
const standalone_1 = require("prettier/standalone");
const converter_1 = require("./converter");
const writeAndLint = (filepath, expression) => __awaiter(void 0, void 0, void 0, function* () {
    yield fs.promises.mkdir(path_1.default.dirname(filepath), { recursive: true });
    // It fails when linting a string, so it is saved to a file first.
    yield fs.promises.writeFile(filepath, expression);
    const eslint = new eslint_1.ESLint({
        cwd: path_1.default.resolve(__dirname, "..", ".."),
        fix: true,
        baseConfig: typescript_1.default,
        overrideConfig: {
            rules: {
                "@typescript-eslint/no-namespace": [
                    "error",
                    { allowDeclarations: true },
                ],
            },
        },
        overrideConfigFile: true,
    });
    const eslintResult = (yield eslint.lintFiles(filepath))[0];
    const eslintOutput = eslintResult.output;
    const prettySource = yield (0, standalone_1.format)(eslintOutput, {
        parser: "typescript",
        plugins: [prettierPluginTypescript, prettierPluginEstree],
    });
    yield fs.promises.mkdir(path_1.default.dirname(filepath), { recursive: true });
    yield fs.promises.writeFile(filepath, prettySource);
});
describe("convertToTsExpression", () => {
    const TEMP_TEST_TYPEDEF = "tmp.test-convertToTsExpression-fields.d.ts";
    test("generate type definition file", () => __awaiter(void 0, void 0, void 0, function* () {
        const client = new demo_client_1.DemoClient();
        const fieldTypeGroups = yield client
            .fetchFormProperties({
            appId: "",
            preview: false,
            guestSpaceId: null,
        })
            .then((properties) => fileldtype_converter_1.FieldTypeConverter.convertFieldTypesToFieldTypeGroups((0, objectvalues_1.objectValues)(properties)));
        const input = {
            typeName: "TestFields",
            namespace: "kintone.types",
            fieldTypeGroups,
        };
        const tsExpression = (0, converter_1.convertToTsExpression)(input).tsExpression();
        yield writeAndLint(TEMP_TEST_TYPEDEF, tsExpression);
        const expected = fs
            .readFileSync(`./resources/test-convertToTsExpression-fields.d.ts`)
            .toString()
            .trim()
            .replace(/\r?\n/g, "");
        const actual = fs
            .readFileSync(TEMP_TEST_TYPEDEF)
            .toString()
            .trim()
            .replace(/\r?\n/g, "");
        expect(actual.toString().trim()).toEqual(expected.toString().trim());
    }));
    afterEach(() => {
        fs.unlink(TEMP_TEST_TYPEDEF, (err) => {
            if (err) {
                throw err;
            }
        });
    });
});
describe("fullWidthSymbol Test", () => {
    const TEMP_TEST_TYPEDEF = "tmp.test-fullWidthSymbol-fields.d.ts";
    test("generate type definition file", () => __awaiter(void 0, void 0, void 0, function* () {
        const client = new demo_fullwidth_symbol_client_1.DemoFullWidthSymbolClient();
        const fieldTypeGroups = yield client
            .fetchFormProperties({
            appId: "",
            preview: false,
            guestSpaceId: null,
        })
            .then((properties) => fileldtype_converter_1.FieldTypeConverter.convertFieldTypesToFieldTypeGroups((0, objectvalues_1.objectValues)(properties)));
        const input = {
            typeName: "TestFields",
            namespace: "kintone.types",
            fieldTypeGroups,
        };
        const tsExpression = (0, converter_1.convertToTsExpression)(input).tsExpression();
        yield writeAndLint(TEMP_TEST_TYPEDEF, tsExpression);
        const expected = fs
            .readFileSync("./resources/test-fullWidthSymbol-fields.d.ts")
            .toString()
            .trim()
            .replace(/\r?\n/g, "");
        const actual = fs
            .readFileSync(TEMP_TEST_TYPEDEF)
            .toString()
            .trim()
            .replace(/\r?\n/g, "");
        expect(actual.toString().trim()).toEqual(expected.toString().trim());
    }));
    afterEach(() => {
        fs.unlink(TEMP_TEST_TYPEDEF, (err) => {
            if (err) {
                throw err;
            }
        });
    });
});
//# sourceMappingURL=template.test.js.map