"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeDefinitionTemplate = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const eslint_1 = require("eslint");
const standalone_1 = require("prettier/standalone");
const prettierPluginTypescript = __importStar(require("prettier/plugins/typescript"));
const prettierPluginEstree = __importStar(require("prettier/plugins/estree"));
const converter_1 = require("./converter");
const typescript_1 = __importDefault(require("@cybozu/eslint-config/flat/presets/typescript"));
const renderAsFile = (output, renderInput) => __awaiter(void 0, void 0, void 0, function* () {
    const tsExpression = (0, converter_1.convertToTsExpression)(renderInput);
    const eslint = new eslint_1.ESLint({
        cwd: path.resolve(__dirname, "..", ".."),
        fix: true,
        baseConfig: typescript_1.default,
        overrideConfig: {
            rules: {
                "@typescript-eslint/no-namespace": [
                    "error",
                    { allowDeclarations: true },
                ],
            },
        },
        overrideConfigFile: true,
    });
    const eslintResult = (yield eslint.lintText(tsExpression.tsExpression()))[0];
    if (eslintResult.fatalErrorCount > 0) {
        let errorMessage = "";
        if (eslintResult.messages.length > 0) {
            errorMessage = `Causes:`;
            eslintResult.messages.forEach((error) => {
                errorMessage += `\n- ${error.message}`;
            });
        }
        throw new Error(`Failed to fix lint errors on the generated type definition file.\n${errorMessage}`);
    }
    let eslintOutput = "";
    // https://eslint.org/docs/developer-guide/nodejs-api#-lintresult-type
    if ("output" in eslintResult) {
        eslintOutput = eslintResult.output;
    }
    else if ("source" in eslintResult) {
        eslintOutput = eslintResult.source;
    }
    else {
        throw new Error("unexpected result");
    }
    const prettySource = yield (0, standalone_1.format)(eslintOutput, {
        parser: "typescript",
        plugins: [prettierPluginTypescript, prettierPluginEstree],
    });
    const outputPath = path.resolve(output);
    yield fs.promises.mkdir(path.dirname(outputPath), { recursive: true });
    yield fs.promises.writeFile(outputPath, prettySource);
});
// definition
exports.TypeDefinitionTemplate = {
    renderAsFile,
};
//# sourceMappingURL=template.js.map